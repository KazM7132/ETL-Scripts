%pip install googleads
%pip install jupyter_scheduler


#!/usr/bin/env python
#
# Copyright 2015 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""This example runs a typical daily inventory report."""

import tempfile

# Import appropriate modules from the client library.
from googleads import ad_manager
from googleads import errors
from datetime import date
import time
import _locale

today = date.today()
yearNow = today.year
monthNow = today.month
dayNow = today.day
yesterday = dayNow - 1
str1 = '_'
preToday = str(today) + str1
t= time.localtime()
h= t.tm_hour
m= t.tm_min

jobtimeNow = str(today) + '_' + str(h) + '_' + str(m) + '_'

_locale._getdefaultlocale = (lambda *args: ['en_US', 'UTF-8'])

  # Set the start and end dates of the report to run.
  

def main(client):
  # Initialize a DataDownloader.
  report_downloader = client.GetDataDownloader(version='v202311')

  # Create report job.
  report_job = {
      'reportQuery': {
          'dimensions': ['DATE', 'AD_UNIT_NAME'],
          'adUnitView': 'HIERARCHICAL',
          'columns': ['ADSENSE_LINE_ITEM_LEVEL_REVENUE', 
                      'TOTAL_LINE_ITEM_LEVEL_CPM_AND_CPC_REVENUE',
                      'AD_EXCHANGE_LINE_ITEM_LEVEL_REVENUE',
                      'TOTAL_LINE_ITEM_LEVEL_ALL_REVENUE',
                      'YIELD_GROUP_ESTIMATED_REVENUE',
                      ],
          'dateRangeType': 'CUSTOM_DATE',
          'startDate': {'year': yearNow,'month': monthNow,'day': 1},
          'endDate': {'year': yearNow,'month': monthNow,'day': yesterday},
      }
  }

  try:
    # Run the report and wait for it to finish.
    report_job_id = report_downloader.WaitForReport(report_job)
  except errors.AdManagerReportError as e:
    print('Failed to generate report. Error was: %s' % e)

  # Change to your preferred export format.
  export_format = 'CSV_DUMP'

    
  report_file = tempfile.NamedTemporaryFile(prefix= jobtimeNow , dir= 'C:\\Users\\zakwi\\Desktop\\Data Import\\AD MANAGER DATA', suffix='.csv.gz', delete=False)

  # Download report data.
  report_downloader.DownloadReportToFile(report_job_id, export_format, report_file)


  report_file.close()

  # Display results.
  print('Report job with id "%s" downloaded to:\n%s' % (report_job_id, report_file.name))

if __name__ == '__main__':
  # Initialize client object.
  ad_manager_client = ad_manager.AdManagerClient.LoadFromStorage()
  main(ad_manager_client)
